/Setup
#include <stdio.h>
#include <time.h>
#include "E101.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Function for opening the ssh gate
	
void open(){

	char message[10] = "Please";
	char server_addr[20] = "130.195.6.196";
		connect_to_server(server_addr, 1024);
	
		send_to_server(message);
		receive_from_server(message);
		send_to_server(message);
//		return 0;
	
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	int  calculateThreshold(int colournumber){  
		                    
	take_picture();
	                             
	double max= 0;
	double min = 100000;
	//while(row <= 319){
		column = 0;
		while(column <= 239){
			if(max < get_pixel(120, column, colournumber)){
				max = get_pixel(120, column, colournumber);
			}
			if(min > get_pixel(120, column, colournumber)){
				min = get_pixel(120, column, colournumber);
			}
			
			column += 1;
		}
		//row+=1;
	//}
	
	threshold = ((max+min)/2);
	return threshold;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        int calculateError(int colournum){                                  
	
	int colournumber = colournum;
	int scanline = 120; //line of pixels being analysed
	
	int error = 0; 
	int weight = -160
	int whitepixels = 0;
	int columnnumber = 0;
	int threshold;
	int row = 0;
	int column = 0;
	int total = 0;
	double kp = 0.9;  // allows you to edit the affect of the error on the motor speed. Ie this decreases the error, and we can fine tune when testing on the course.
                      
	while(1){                                    
	
		take_picture();
	         
		//Scanning the scanline row and calculating the error
		while (columnnumber <= 239) {
			       //storing the whiteness of each pixel along the scanline
			int pixel = get_pixel (scanline, columnnumber, colournumber);
		
			if (pixel >= calculateThreshold(colournumber)){ //if the current pixel is considered white
				pixel = 1;
				whitepixels = whitepixels + 1;   
			}
			else{
				pixel = 0;
			}			
			             //the pixel is multiplied by its distance from the center
			pixel = pixel*weight;
			                   
			error = error + pixel;
			error = error/whitepixels;
			
			columnnumber++;
			weight++;
		}	
		if(whitepixels == 0){ //if there are no white pixels found, return error of 10000
			return 10000;
			}
		if(whitepixels == 320){ // if there are no black pixels found, return 20000
			return 20000;
		}
	}
	return error*kp;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Function for white line camera 
	
	void adjust(){
		
		double error = calculateError(3);
		//double turnTimeSec;
		//double turnTimeMicro;
		//double errorTime;
		//int scalar = 27; //to be researched - changed to 27 from 30
		
		                    //Create scalar for the error
		//errorTime = scalar * error);
		//if(errorTime<0){
		//	errorTime*=-1;
		//}
		                 
		//turnTimeSec = (int)(errorTime/1000000);
		//turnTimeMicro = errorTime-(turnTimeSec*1000000);
		
		//set_motor(2, 0); 
		//set_motor(1, 0);
		
		//if (!(error > -500 && error < 500)) {
		                  //if the line is to the right of the center TURN RIGHT
		//	if (error >= 0){
				//Set the turn amount (time) to be proportional to the error scalar
		//		set_motor(1, 80);
		//		set_motor(2, -80);
		//		sleep1(turnTimeSec, turnTimeMicro);
				
			//}
			//if the line is to the left of the center TURN LEFT
			//else{ 
				//Set the turn amount (time) to be proportional to the error scalar
			//	set_motor(1, -80);
			//	set_motor(2, 80);
			//	sleep1(turnTimeSec, turnTimeMicro);
				
			//}
		//} 
		
		
		if(!(calculateError(3) == 10000){  //change the speed on each motor depending on the error value, if error is negative (line on left side) 
			set_motor(2, 100 + error;);    //then increase speed of the left motor, and decrease speed on the right motor, vice versa.
			set_motor(1, 100 - error;);
		
		}
		else if(calculateError(3) == 10000) //if there is no white line detected, reverse the robot for 0.5 seconds and check again until it is found.
		{
			set_motor(2, -110);
			set_motor(1, 110);
			sleep1(0,500000);
		}
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	//Function for turning to find the white line    
void ninetyDegree(int speed, int scanline){
	
	int column = 0;
	int totalL = 0;
	int totalR = 0;
	
	double threshold = calculateThreshold;
	
	take_picture();
	
	while(column<160){
		int pixel = get_pixel (scanline, column, 3);
		if(pixel > threshold){
			totalL += 1;			
		}
		column++;
	}
	while(column<319){
		int pixel = get_pixel (scanline, column, 3);
		if(pixel > threshold){
			totalR += 1;
		}
		column++;
	}

    //If there is a solid white line or a 90 degree right turn
	if(totalR > 100){
		set_motor(2, speed);
		set_motor(1, speed);
		sleep1(0,200000); //Move forwards for a certain amount of time (to be researched)
		set_motor(1, 80);
		set_motor(2, -80);
		sleep1(0, 300000);  //turn to the right 90 degrees for a certain amount of time(to be researched)
		set_motor(1, 0);
		set_motor(2, 0);
	}
	//if theres a 90 degree turn to the left
	else if(totalL > 100){
		set_motor(2, speed);
		set_motor(1, speed);
		sleep1(0,200000); //Move forwards for a certain amount of time (to be researched)
		set_motor(1, -80);
		set_motor(2, 80);
		sleep1(0, 300000);  //turn to the left 90 degrees for a certain amount of time(to be researched)
		set_motor(1, 0);
		set_motor(2, 0);

	}
	//if theres no white line in front of the camera then it should rotate until it finds a line
	else if((totalR + totalL) < 10){
		bool foundwhite = 0;
		while(!foundwhite){
			int totalM = 0;
			//set to rotate 90 degrees
			set_motor(1, -80);
			set_motor(2, 80);
			sleep1(0, 300000);
			set_motor(1, 0);
			set_motor(2, 0);
			column = 100;
			while(column<220){
				int pixelM = get_pixel (scanline, column, 3);
				if(pixelM > threshold){
					totalM += 1;			
				}
				column++;
			}
			if(totalM > 10){
				foundwhite = 1;
			}
		}		
		
		
		//once it finds a line then stop rotating
		set_motor(1, 0);
		set_motor(2, 0);
	}
}		

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Function to detect line (breaks)  

bool redbreaking(){
	
	int columnnumber = 1;
	int redpix = 0;
	int bluepix = 0;
	int greenpix = 0;
	
	take_picture();
	         
		while (columnnumber <= 320) {
		int Rpixel = get_pixel (120, columnnumber, 0);
		int Bpixel = get_pixel (120, columnnumber, 1);
		int Gpixel = get_pixel (120, columnnumber, 2);
		   if (Rpixel > 200 && Bpixel < 100 && Gpixel < 100){
				
				redpix = redpix + 1;   
			}
						
			columnnumber++;
		} 	
  	
	if (redpix  > 50){
		
		set_motor(0,0);
		sleep1(0,200000);
		return true;
	} 
	return false;
}	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Function for distance sensors 
	
void followWalls(){
		
	int leftADC;
	int rightADC;
	int frontADC;
	int averageNoise = 20;  //to be researched
	int timeToTurn90Degrees = 4; //to be researched
	int closeReading = 1; //can be changed depending on short or long distance sensors used

	//Assuming left motor is motor 0 and right motor is motor 1

	while(1){
		leftADC = read_analog(0);
		rightADC = read_analog(1);
		frontADC = read_analog(2);

		//if the car reaches a wall
		if(frontADC == 1){
			set_motor(0, 0);
			set_motor(1, 0);
			sleep1(0,200000);

			//if there is a right and left wall the robot should turn 180
			if(leftADC == 1 && rightADC == 1){
				set_motor(1, -255);
				set_motor(0, 255);
				sleep1(0, 2*timeToTurn90Degrees);
				set_motor(1, 0);
				set_motor(0, 0);

			}

			//if there is a left wall but not a right wall then the robot should go right
			if(leftADC == 1){
				set_motor(1, -255);
				set_motor(0, 255);
				sleep1(0, timeToTurn90Degrees);
				set_motor(1, 0);
				set_motor(0, 0);
			}
			//if there is a right wall but not a left wall then the robot should go right
			else if(rightADC == 1){
				set_motor(1, 255);
				set_motor(0, -255);
				sleep1(0, timeToTurn90Degrees);
				set_motor(1, 0);
				set_motor(0, 0);
			}
		}

		//if there is nothing in front of the front sensor then it should go forward
		else(){			
			set_motor(0, 255);
			set_motor(1, 255);
		}

	}


return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		
	//Function for waiting for the gate to open  
	int gateWait(){
		
		
	return 0;	
	}
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//main
int main(){
init();

 int quad = 1;
 
////////////////////////////////////////////////////////////////////////
// open gate
while(quad == 1){
	open();
	quad++;	
}
////////////////////////////////////////////////////////////////////////
	// follow striaght/curvy white line - breaks when sees all white
	while(quad == 2){			
    adjust();		
	if (calculateError(3) == 20000){
		quad++;
	}	
	}

////////////////////////////////////////////////////////////////////////	
	// follow maze white line - breaks when finds the red line	
	while(quad == 3){
			
    adjust();		
	ninetyDegree(-38, 120);
	if (redbreaking() == true){
		quad++;
	}
  	
	}
////////////////////////////////////////////////////////////////////////
    // follow walls, wait at the gate, follow more walls 	
	while(quad == 4){
		
	followWalls();
	if (redbreaking() == true){
		GateWait();
		followWalls();
	
	}	
}

}
